# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, owner: str=None, simulation_config: object=None, token: int=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param label: The label of this Job.  # noqa: E501
        :type label: str
        :param owner: The owner of this Job.  # noqa: E501
        :type owner: str
        :param simulation_config: The simulation_config of this Job.  # noqa: E501
        :type simulation_config: object
        :param token: The token of this Job.  # noqa: E501
        :type token: int
        """
        self.swagger_types = {
            'label': str,
            'owner': str,
            'simulation_config': object,
            'token': int
        }

        self.attribute_map = {
            'label': 'label',
            'owner': 'owner',
            'simulation_config': 'simulation_config',
            'token': 'token'
        }

        self._label = label
        self._owner = owner
        self._simulation_config = simulation_config
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self) -> str:
        """Gets the label of this Job.

        Identifies the job  # noqa: E501

        :return: The label of this Job.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this Job.

        Identifies the job  # noqa: E501

        :param label: The label of this Job.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def owner(self) -> str:
        """Gets the owner of this Job.

        Identifies the submitter of the job  # noqa: E501

        :return: The owner of this Job.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this Job.

        Identifies the submitter of the job  # noqa: E501

        :param owner: The owner of this Job.
        :type owner: str
        """

        self._owner = owner

    @property
    def simulation_config(self) -> object:
        """Gets the simulation_config of this Job.


        :return: The simulation_config of this Job.
        :rtype: object
        """
        return self._simulation_config

    @simulation_config.setter
    def simulation_config(self, simulation_config: object):
        """Sets the simulation_config of this Job.


        :param simulation_config: The simulation_config of this Job.
        :type simulation_config: object
        """
        if simulation_config is None:
            raise ValueError("Invalid value for `simulation_config`, must not be `None`")  # noqa: E501

        self._simulation_config = simulation_config

    @property
    def token(self) -> int:
        """Gets the token of this Job.

        Random token to prevent duplicate submission  # noqa: E501

        :return: The token of this Job.
        :rtype: int
        """
        return self._token

    @token.setter
    def token(self, token: int):
        """Sets the token of this Job.

        Random token to prevent duplicate submission  # noqa: E501

        :param token: The token of this Job.
        :type token: int
        """

        self._token = token
