# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class JobOutputRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, output_groups: List[str]=None, log_level: str=None):  # noqa: E501
        """JobOutputRequest - a model defined in Swagger

        :param output_groups: The output_groups of this JobOutputRequest.  # noqa: E501
        :type output_groups: List[str]
        :param log_level: The log_level of this JobOutputRequest.  # noqa: E501
        :type log_level: str
        """
        self.swagger_types = {
            'output_groups': List[str],
            'log_level': str
        }

        self.attribute_map = {
            'output_groups': 'output_groups',
            'log_level': 'log_level'
        }

        self._output_groups = output_groups
        self._log_level = log_level

    @classmethod
    def from_dict(cls, dikt) -> 'JobOutputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobOutputRequest of this JobOutputRequest.  # noqa: E501
        :rtype: JobOutputRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_groups(self) -> List[str]:
        """Gets the output_groups of this JobOutputRequest.


        :return: The output_groups of this JobOutputRequest.
        :rtype: List[str]
        """
        return self._output_groups

    @output_groups.setter
    def output_groups(self, output_groups: List[str]):
        """Sets the output_groups of this JobOutputRequest.


        :param output_groups: The output_groups of this JobOutputRequest.
        :type output_groups: List[str]
        """

        self._output_groups = output_groups

    @property
    def log_level(self) -> str:
        """Gets the log_level of this JobOutputRequest.

        Log level to produce  # noqa: E501

        :return: The log_level of this JobOutputRequest.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level: str):
        """Sets the log_level of this JobOutputRequest.

        Log level to produce  # noqa: E501

        :param log_level: The log_level of this JobOutputRequest.
        :type log_level: str
        """
        allowed_values = ["ALL", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level
