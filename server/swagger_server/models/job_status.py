# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, job_id: int=None, label: str=None, owner: str=None, time_submitted: datetime=None, time_started: datetime=None, time_completed: datetime=None, status: str=None):  # noqa: E501
        """JobStatus - a model defined in Swagger

        :param job_id: The job_id of this JobStatus.  # noqa: E501
        :type job_id: int
        :param label: The label of this JobStatus.  # noqa: E501
        :type label: str
        :param owner: The owner of this JobStatus.  # noqa: E501
        :type owner: str
        :param time_submitted: The time_submitted of this JobStatus.  # noqa: E501
        :type time_submitted: datetime
        :param time_started: The time_started of this JobStatus.  # noqa: E501
        :type time_started: datetime
        :param time_completed: The time_completed of this JobStatus.  # noqa: E501
        :type time_completed: datetime
        :param status: The status of this JobStatus.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'job_id': int,
            'label': str,
            'owner': str,
            'time_submitted': datetime,
            'time_started': datetime,
            'time_completed': datetime,
            'status': str
        }

        self.attribute_map = {
            'job_id': 'jobID',
            'label': 'label',
            'owner': 'owner',
            'time_submitted': 'time_submitted',
            'time_started': 'time_started',
            'time_completed': 'time_completed',
            'status': 'status'
        }

        self._job_id = job_id
        self._label = label
        self._owner = owner
        self._time_submitted = time_submitted
        self._time_started = time_started
        self._time_completed = time_completed
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobStatus of this JobStatus.  # noqa: E501
        :rtype: JobStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> int:
        """Gets the job_id of this JobStatus.


        :return: The job_id of this JobStatus.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: int):
        """Sets the job_id of this JobStatus.


        :param job_id: The job_id of this JobStatus.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def label(self) -> str:
        """Gets the label of this JobStatus.


        :return: The label of this JobStatus.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this JobStatus.


        :param label: The label of this JobStatus.
        :type label: str
        """

        self._label = label

    @property
    def owner(self) -> str:
        """Gets the owner of this JobStatus.


        :return: The owner of this JobStatus.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this JobStatus.


        :param owner: The owner of this JobStatus.
        :type owner: str
        """

        self._owner = owner

    @property
    def time_submitted(self) -> datetime:
        """Gets the time_submitted of this JobStatus.

        Datetime job started running  # noqa: E501

        :return: The time_submitted of this JobStatus.
        :rtype: datetime
        """
        return self._time_submitted

    @time_submitted.setter
    def time_submitted(self, time_submitted: datetime):
        """Sets the time_submitted of this JobStatus.

        Datetime job started running  # noqa: E501

        :param time_submitted: The time_submitted of this JobStatus.
        :type time_submitted: datetime
        """

        self._time_submitted = time_submitted

    @property
    def time_started(self) -> datetime:
        """Gets the time_started of this JobStatus.

        Datetime job started running  # noqa: E501

        :return: The time_started of this JobStatus.
        :rtype: datetime
        """
        return self._time_started

    @time_started.setter
    def time_started(self, time_started: datetime):
        """Sets the time_started of this JobStatus.

        Datetime job started running  # noqa: E501

        :param time_started: The time_started of this JobStatus.
        :type time_started: datetime
        """

        self._time_started = time_started

    @property
    def time_completed(self) -> datetime:
        """Gets the time_completed of this JobStatus.

        Datetime job finished running  # noqa: E501

        :return: The time_completed of this JobStatus.
        :rtype: datetime
        """
        return self._time_completed

    @time_completed.setter
    def time_completed(self, time_completed: datetime):
        """Sets the time_completed of this JobStatus.

        Datetime job finished running  # noqa: E501

        :param time_completed: The time_completed of this JobStatus.
        :type time_completed: datetime
        """

        self._time_completed = time_completed

    @property
    def status(self) -> str:
        """Gets the status of this JobStatus.

        Job execution status  # noqa: E501

        :return: The status of this JobStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobStatus.

        Job execution status  # noqa: E501

        :param status: The status of this JobStatus.
        :type status: str
        """
        allowed_values = ["pending", "running", "failed", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
