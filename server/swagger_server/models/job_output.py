# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class JobOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, job_id: int=None, url_log: str=None, url_data: str=None, time_produced: datetime=None, status: str=None):  # noqa: E501
        """JobOutput - a model defined in Swagger

        :param job_id: The job_id of this JobOutput.  # noqa: E501
        :type job_id: int
        :param url_log: The url_log of this JobOutput.  # noqa: E501
        :type url_log: str
        :param url_data: The url_data of this JobOutput.  # noqa: E501
        :type url_data: str
        :param time_produced: The time_produced of this JobOutput.  # noqa: E501
        :type time_produced: datetime
        :param status: The status of this JobOutput.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'job_id': int,
            'url_log': str,
            'url_data': str,
            'time_produced': datetime,
            'status': str
        }

        self.attribute_map = {
            'job_id': 'jobID',
            'url_log': 'url_log',
            'url_data': 'url_data',
            'time_produced': 'time_produced',
            'status': 'status'
        }

        self._job_id = job_id
        self._url_log = url_log
        self._url_data = url_data
        self._time_produced = time_produced
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'JobOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobOutput of this JobOutput.  # noqa: E501
        :rtype: JobOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> int:
        """Gets the job_id of this JobOutput.


        :return: The job_id of this JobOutput.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: int):
        """Sets the job_id of this JobOutput.


        :param job_id: The job_id of this JobOutput.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def url_log(self) -> str:
        """Gets the url_log of this JobOutput.


        :return: The url_log of this JobOutput.
        :rtype: str
        """
        return self._url_log

    @url_log.setter
    def url_log(self, url_log: str):
        """Sets the url_log of this JobOutput.


        :param url_log: The url_log of this JobOutput.
        :type url_log: str
        """

        self._url_log = url_log

    @property
    def url_data(self) -> str:
        """Gets the url_data of this JobOutput.


        :return: The url_data of this JobOutput.
        :rtype: str
        """
        return self._url_data

    @url_data.setter
    def url_data(self, url_data: str):
        """Sets the url_data of this JobOutput.


        :param url_data: The url_data of this JobOutput.
        :type url_data: str
        """

        self._url_data = url_data

    @property
    def time_produced(self) -> datetime:
        """Gets the time_produced of this JobOutput.

        Datetime output data was produced  # noqa: E501

        :return: The time_produced of this JobOutput.
        :rtype: datetime
        """
        return self._time_produced

    @time_produced.setter
    def time_produced(self, time_produced: datetime):
        """Sets the time_produced of this JobOutput.

        Datetime output data was produced  # noqa: E501

        :param time_produced: The time_produced of this JobOutput.
        :type time_produced: datetime
        """

        self._time_produced = time_produced

    @property
    def status(self) -> str:
        """Gets the status of this JobOutput.

        Job execution status  # noqa: E501

        :return: The status of this JobOutput.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobOutput.

        Job execution status  # noqa: E501

        :param status: The status of this JobOutput.
        :type status: str
        """
        allowed_values = ["success", "pending", "running", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
